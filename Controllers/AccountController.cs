using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using FigureShop.Models;
using System.Threading.Tasks;
using System.Text.Encodings.Web;
using FigureShop.Services;
using FigureShop.ViewModels;

namespace FigureShop.Controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly IEmailSender _emailSender;

        public AccountController(UserManager<ApplicationUser> userManager,
                                 SignInManager<ApplicationUser> signInManager,
                                 IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _emailSender = emailSender;
        }

        [HttpGet]
        public IActionResult ChangePassword()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordViewModel model)
        {
            if (!ModelState.IsValid)
                return Json(new { success = false, message = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá." });

            if (model.NewPassword != model.ConfirmPassword)
                return Json(new { success = false, message = "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u ph·∫£i gi·ªëng nhau." });

            var user = await _userManager.GetUserAsync(User);
            if (user == null)
                return Json(new { success = false, message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

            // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© ƒë√∫ng kh√¥ng
            var isOldPasswordCorrect = await _userManager.CheckPasswordAsync(user, model.OldPassword);
            if (!isOldPasswordCorrect)
                return Json(new { success = false, message = "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng." });

            var result = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword);
            if (result.Succeeded)
                return Json(new { success = true, message = "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." });

            var errorMsg = result.Errors.FirstOrDefault()?.Description ?? "C√≥ l·ªói x·∫£y ra.";
            return Json(new { success = false, message = errorMsg });
        }

        [HttpGet]
        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            var user = new ApplicationUser
            {
                UserName = model.UserName,
                Email = model.Email,
                FullName = model.FullName,
                Address = model.Address,
                PhoneNumber = model.PhoneNumber
            };

            var result = await _userManager.CreateAsync(user, model.Password);
            if (result.Succeeded)
            {
                // G·ª≠i email x√°c nh·∫≠n
                var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                var confirmationLink = Url.Action(nameof(ConfirmEmail), "Account",
                    new { userId = user.Id, token }, Request.Scheme);

                await _emailSender.SendEmailAsync(model.Email, "X√°c nh·∫≠n t√†i kho·∫£n",
                    $"Vui l√≤ng x√°c nh·∫≠n t√†i kho·∫£n t·∫°i <a href='{HtmlEncoder.Default.Encode(confirmationLink)}'>ƒë√¢y</a>.");

                TempData["RegisterSuccess"] = "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.";
                return RedirectToAction("Login", "Account");
            }

            foreach (var error in result.Errors)
            {
                ModelState.AddModelError(string.Empty, error.Description);
                Console.WriteLine("ƒêƒÉng k√Ω l·ªói: " + error.Description);
            }
            return View(model);
        }

        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(LoginViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            // Cho ph√©p login b·∫±ng Username ho·∫∑c Email
            var user = await _userManager.FindByNameAsync(model.UserNameOrEmail)
                        ?? await _userManager.FindByEmailAsync(model.UserNameOrEmail);

            if (user == null)
            {
                ModelState.AddModelError(string.Empty, "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.");
                return View(model);
            }

            if (!await _userManager.IsEmailConfirmedAsync(user))
            {
                ModelState.AddModelError(string.Empty, "Vui l√≤ng x√°c nh·∫≠n email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.");
                return View(model);
            }

            var result = await _signInManager.PasswordSignInAsync(user.UserName, model.Password, model.RememberMe, false);

            if (result.Succeeded)
                return RedirectToAction("Index", "Home");

            ModelState.AddModelError(string.Empty, "ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng.");
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public async Task<IActionResult> ConfirmEmail(string userId, string token)
        {
            if (userId == null || token == null)
                return RedirectToAction("Index", "Home");

            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
                return NotFound();

            var result = await _userManager.ConfirmEmailAsync(user, token);
            return View(result.Succeeded ? "ConfirmEmail" : "Error");


        }
        [HttpGet]
        public IActionResult ForgotPassword()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ForgotPassword(ForgotPasswordViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            var user = await _userManager.FindByEmailAsync(model.Email);
            if (user == null || !(await _userManager.IsEmailConfirmedAsync(user)))
            {
                // Kh√¥ng ti·∫øt l·ªô l√Ω do: ƒë·ªÉ b·∫£o m·∫≠t
                return RedirectToAction("ForgotPasswordConfirmation");
            }

            var token = await _userManager.GeneratePasswordResetTokenAsync(user);
            var callbackUrl = Url.Action(nameof(ResetPassword), "Account", new { token, email = model.Email }, Request.Scheme);

            await _emailSender.SendEmailAsync(model.Email, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
                $"Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>Reset Password</a>");

            return RedirectToAction("ForgotPasswordConfirmation");
        }

        [HttpGet]
        public IActionResult ForgotPasswordConfirmation()
        {
            return View();
        }
        // GET: /Account/ResetPassword
        [HttpGet]
        public IActionResult ResetPassword(string token, string email)
        {
            if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(email))
                return RedirectToAction("Index", "Home");

            var model = new ResetPasswordViewModel
            {
                Token = token,
                Email = email
            };
            return View(model);
        }

        // POST: /Account/ResetPassword
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ResetPassword(ResetPasswordViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            var user = await _userManager.FindByEmailAsync(model.Email);
            if (user == null)
                return RedirectToAction("ResetPasswordConfirmation"); // tr√°nh l·ªô email

            // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi c√≥ tr√πng v·ªõi m·∫≠t kh·∫©u c≈© kh√¥ng
            var isSamePassword = await _userManager.CheckPasswordAsync(user, model.Password);
            if (isSamePassword)
            {
                ModelState.AddModelError(string.Empty, "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©.");
                return View(model);
            }

            var result = await _userManager.ResetPasswordAsync(user, model.Token, model.Password);
            if (result.Succeeded)
                return RedirectToAction("ResetPasswordConfirmation");

            foreach (var error in result.Errors)
                ModelState.AddModelError(string.Empty, error.Description);

            return View(model);
        }

        [HttpGet]
        public IActionResult ResetPasswordConfirmation()
        {
            return View();
        }
        
    }
}